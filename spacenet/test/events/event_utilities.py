from typing import List, Tuple, Type
from uuid import UUID

from hypothesis import strategies as st
from hypothesis.strategies import SearchStrategy
from pydantic import BaseModel, ValidationError


def is_valid_uuid(s: str) -> bool:
    """
    Return true if s can be converted into a valid UUID, and false otherwise.

    :param s: value to check if can be converted into a valid UUID
    :return: true if s can be converted into a valid UUID, false otherwise
    >>> is_valid_uuid("hello")
    False
    >>> is_valid_uuid("123e4567-e89b-12d3-a456-426614174000")
    True
    """
    try:
        UUID(hex=s)
    except ValueError:
        return False
    else:
        return True


INVALID_UUIDS = st.text().filter(lambda s: not is_valid_uuid(s))


def valid_invalid_from_allowed(
    allowed: List[str],
) -> Tuple[SearchStrategy, SearchStrategy]:
    """
    Construct valid and invalid search strategies from a given list of allowed values.

    :param allowed: values which are allowed
    :return: valid and invalid strategies, where valid strategies are those from allowed, and
        the text generated by the two strategies is disjoint
    """
    valid = st.sampled_from(allowed)
    invalid = st.text().filter(lambda s: s not in allowed)
    return valid, invalid


def success_from_kw(type_: Type[BaseModel], **kwargs) -> None:
    """
    Construct an instance of `type_` via provided keyword arguments, and expect both that
    construction is successful and all fields match their expected values in kwargs.

    :param type_: the type to construct
    :param kwargs: keyword arguments to type_ constructor
    """
    event = type_.parse_obj(kwargs)
    for name, val in kwargs.items():
        assert val == getattr(event, name)


def xfail_from_kw(type_: Type[BaseModel], **kwargs) -> None:
    """
    Construct an instance of `type_` via provided keyword arguments, and expect that
    construction fails, raising a ValidationError.

    :param type_: the type to construct
    :param kwargs: keyword arguments to type_ constructor
    """
    try:
        type_.parse_obj(kwargs)
    except ValidationError:
        return
    else:
        assert False, f"Expected construction of {type_.__name__} with {kwargs} to fail"
